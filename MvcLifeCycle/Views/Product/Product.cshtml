@section scripts {
    <style type="text/css">
        body {
            margin: 20px;
            font-family: "Arial", "Helventica", sans-serif;
        }

        label {
            width: 80px;
            display: inline-block;
        }

        button {
            display: inline-block;
            outline: none;
            cursor: pointer;
            text-align: center;
            text-decoration: none;
            padding: .4em 1.1em .4em;
            color: #fef4e9;
            border: solid 1px #006fb9;
            background: #1276bb;
        }

            button:hover {
                text-decoration: none;
                background: #282828;
                border: solid 1px #000;
            }

        table {
            padding-top: 1em;
        }

        thead, tfoot {
            font-weight: 600;
        }

        th, td {
            padding: .1em .5em;
            text-align: left;
        }

            td li, td ul {
                margin: 0;
                padding: 0;
            }

            td li {
                display: inline;
            }

                td li::after {
                    content: ',';
                }

                td li:last-child::after {
                    content: '';
                }
    </style>
    
<script src="~/Scripts/knockout-3.4.2.js"></script>
<script src="@Url.Content("~/Scripts/knockout-3.4.2.debug.js")" type="text/javascript"></script>
<script type="text/javascript"> 
    debugger;


    function formatCurrency(value) {
        return "$" + value.toFixed(2);
    }
    function ProductViewModel() {
        debugger;
        var self = this;
        self.Id = ko.observable("");
        self.Name = ko.observable("");
        self.Category = ko.observable("");
        self.Price = ko.observable("");

        var Product = {
            Id: self.Id,
            Name: self.Name,
            Category: self.Category,
            Price: self.Price
        };

        self.Product = ko.observable();
        self.Products = ko.observableArray();

        $.ajax({
            url: '@Url.Action("GetAllProducts", "Product")',
            cache: false,
            type: "GET",
            contentType: 'application/json; charset=utf-8',
            data: {},
            success: function (data) {
                debugger
                self.Products(data);
            }
        });

        self.Total = ko.computed(function () {
            var sum = 0;
            var arr = self.Products();
            for (var i = 0; i < arr.length; i++) {
                sum += arr[i].Price;
            }
            return sum;
        });



        //Add New Item
        self.create = function () {
            debugger;
            if (Product.Name() != "" && Product.Price() != "" && Product.Category() != "") {
                $.ajax({
                    url: '@Url.Action("AddProduct", "Product")',
                    cache: false,
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: ko.toJSON(Product),
                    success: function (data) {
                        // alert('added');
                        self.Products.push(data);
                        self.Name("");
                        self.Price("");
                        self.Category("");

                    }
                }).fail(
                     function (xhr, textStatus, err) {
                         alert(err);
                     });

            }
            else {
                alert('Please Enter All the Values !!');
            }

        }
        // Delete product details
        @*self.delete = function (Product) {
            if (confirm('Are you sure to Delete "' + Product.Name + '" product ??')) {
                var id = Product.Id;

                $.ajax({
                    url: '@Url.Action("AddProduct", "Product")',
                    cache: false,
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: ko.toJSON(id),
                    success: function (data) {
                        self.Products.remove(Product);
                        //   alert("Record Deleted Successfully");
                    }
                }).fail(
                 function (xhr, textStatus, err) {
                     alert(err);
                 });
            }
        }*@

        self.reset = function () {
            debugger
            self.Name("");
            self.Category("");
            self.Price("");
        }
        // Edit product details

        self.edit = function (Product) {
            self.Product(Product);

        }

        // Update product details
        self.update = function () {
            debugger;
            $.ajax({
                url: '@Url.Action("UpdateProduct","Product")',
                data: ko.toJSON(self.Product()),
                cache:false,
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    debugger;
                    self.Products.removeAll();
                    self, Products(data);
                    self.Product(null);
                }
            }).fail (function(xhr, textStatus, err)
            {
                alert(err);
            });
        }

        self.delete = function (Product) {
            debugger;
            var id = Product.Id;           
            $.ajax({
                url: '@Url.Action("DeleteProduct","Product")',
                data: ko.toJSON(id),
                cache:false,
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    self.Products.removeAll();
                    self.Products(data);
                }
            })
        }
    }
    var viewModel = new ProductViewModel();
    ko.applyBindings(viewModel);
  
</script>
}
<div id="body">

    <h2>Knockout CRUD Operations with MVC4</h2>

    <h3>List of Products</h3>

    <table id="products1" data-bind="visible: Products().length > 0">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Category</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: Products">
            <tr>
                <td data-bind="text: Id"></td>
                <td data-bind="text: Name"></td>
                <td data-bind="text: Category"></td>
                <td data-bind="text: formatCurrency(Price)"></td>

                <td>
                    <button data-bind="click: $root.edit">Edit</button>
                    <button data-bind="click: $root.delete">Delete</button>

                </td>

            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td></td>
                <td></td>
                <td>Total :</td>
                <td data-bind="text: formatCurrency($root.Total())"></td>
                <td></td>
            </tr>
        </tfoot>
    </table>
    <br />
    <div style="border-top: solid 2px  #282828; width: 430px; height: 10px">&nbsp;</div>

    <div data-bind="if: Product">
        <div>
            <h2>Update Product</h2>
        </div>
        <div>
            <label for="productId" data-bind="visible: false">ID</label>
            <label data-bind="text: Product().Id, visible: false"></label>

        </div>
        <div>
            <label for="name">Name</label>
            <input data-bind="value: Product().Name" type="text" title="Name" />
        </div>

        <div>
            <label for="category">Category</label>
            <input data-bind="value: Product().Category" type="text" title="Category" />
        </div>

        <div>
            <label for="price">Price</label>
            <input data-bind="value: Product().Price" type="text" title="Price" />

        </div>
        <br />
        <div>
            <button data-bind="click: $root.update">Update</button>
            <button data-bind="click: $root.cancel">Cancel</button>

        </div>
    </div>

    <div data-bind="ifnot: Product()">
        <div>
            <h2>Add New Product</h2>
        </div>
        <div>
            <label for="name">Name</label>
            <input data-bind="value: $root.Name" type="text" title="Name" />
        </div>

        <div>
            <label for="category">Category</label>
            <input data-bind="value: $root.Category" type="text" title="Category" />
        </div>

        <div>
            <label for="price">Price</label>
            <input data-bind="value: $root.Price" type="text" title="Price" />
        </div>
        <br />
        <div>
            <button data-bind="click: $root.create">Save</button>
            <button data-bind="click: $root.reset">Reset</button>

        </div>
    </div>

</div>
<script>
    var request = new XMLHttpRequest();
    request.open("GET", 'http://platform.devtest.ringcentral.com', true);
    request.send();
    request.onreadystatechange = function () {
        debugger;
        if(this.readyState == 4 && this.status == 200)
        {
            alert("Request Successful");
        }
    };
</script>